/* //////////////////////////////////////////////////////////// */
/* #region  Variables */
var arcMainPageName = "main-page";
var arcMainPopup = "main-popup";
var arcMainPage = null;
var $align = $($_lang == "ar") ? "lef-itm" : "rig-itm";
var $anti_align = $($_lang == "ar") ? "rig-itm" : "lef-itm";
var arabic = /[\u0600-\u06FF]/;

const $field_type = {
    smallInteger: { datatype: "smallInteger" },
    integer: { datatype: "integer" },
    bigInteger: { datatype: "bigInteger" },
    double: { datatype: "double" },
    float: { datatype: "float" },
    string: { datatype: "string" },
    longText: { datatype: "longText" },
    boolean: { datatype: "boolean" },
    enum: { datatype: "enum" },
    date: { datatype: "date" },
    dateTime: { datatype: "dateTime" },
    timestamp: { datatype: "timestamp" },
    image: { datatype: "image" },
};

const $imageType = {
    profilePicture: 0,
    card: 1,
};
const $controls = {
    update: 0,
    delete: 1,
};
/* #endregion */
/* //////////////////////////////////////////////////////////// */

/* //////////////////////////////////////////////////////////// */
/* #region  Functions */
function getDirection($text) {
    return arabic.test($text) == true ? "rtl" : "ltr";
}
/* #endregion */
/* //////////////////////////////////////////////////////////// */

/* //////////////////////////////////////////////////////////// */
/* #region  ArcModel */
class arcModel {
    table = {
        name: null,
        fields: [],
    };
    id = null;
    db_data = null;
    db_index = null;
    da_data = null;
    route = null;
    useProgress = false;

    constructor(table) {
        this.table = table;
        if (table.routes != undefined) {
            if (table.routes.API != undefined) {
                this.route = serverAPI_URL + table.name;
            } else if (table.routes.WEB != undefined) {
                this.route = serverWEB_URL + table.name;
            }
        }
    }

    async index($for_user, $params = []) {
        let route = "";
        if ($for_user == true) {
            route = this.route + "?for_user=1";
        } else {
            route = this.route + "?for_user=0";
        }
        if ($params.length > 0) {
            // $params = [{name: 'portfolio_id', value: 1}, ...];
            for (let i in $params) {
                let param = $params[i];
                route += "&" + param["name"] + "=" + param["value"];
            }
        }
        try {
            waitBox(true, "");
            return await new axios.get(route).then((result) => {
                waitBox(false, "");
                this.db_index = result.data.data;
                return result.data;
            });
        } catch (err) {
            waitBox(false, "");
            console.error(err);
        }
    }
    async store() {
        var config = {
            onUploadProgress: function (progressEvent) {
                var percentCompleted = Math.round(
                    (progressEvent.loaded * 100) / progressEvent.total
                );
                if (this.useProgress == true) {
                    waitBox(
                        true,
                        $_captions.addingProgress[Lang()],
                        percentCompleted
                    );
                }
            },
        };
        try {
            waitBox(true, "");
            return await new axios.post(this.route, this.da_data, config)
                .then((result) => {
                    this.db_data = result.data.data;
                    this.id = this.db_data.id;
                    waitBox(false, "");
                    return result;
                })
                .catch(function (err) {
                    waitBox(false, "");
                    console.log("error");
                    console.log(err);
                    alertBox(msgType.error, Alerts.error[Lang()] + "\n" + err);
                    return err;
                });
        } catch (err) {
            waitBox(false, "");
            console.error(err);
        }
    }
    async update() {
        var config = {
            onUploadProgress: function (progressEvent) {
                var percentCompleted = Math.round(
                    (progressEvent.loaded * 100) / progressEvent.total
                );
                if (this.useProgress == true) {
                    waitBox(
                        true,
                        $_captions.addingProgress[Lang()],
                        percentCompleted
                    );
                }
            },
        };
        try {
            waitBox(true, "");
            return await new axios.put(
                this.route + "/" + this.id,
                this.da_data,
                config
            )
                .then((result) => {
                    this.db_data = result.data.data;
                    this.id = this.db_data.id;
                    waitBox(false, "");
                    return result;
                })
                .catch(function (err) {
                    console.log("error");
                    console.log(err);
                    waitBox(false, "");
                    alertBox(msgType.error, Alerts.error[Lang()] + "\n" + err);
                    return err;
                });
        } catch (err) {
            waitBox(false, "");
            console.error(err);
        }
    }
    async show($id) {
        var config = {
            onUploadProgress: function (progressEvent) {
                var percentCompleted = Math.round(
                    (progressEvent.loaded * 100) / progressEvent.total
                );
                if (this.useProgress == true) {
                    waitBox(
                        true,
                        $_captions.addingProgress[Lang()],
                        percentCompleted
                    );
                }
            },
        };
        try {
            waitBox(true, "");
            return await new axios.get(this.route + "/" + $id, config).then(
                (result) => {
                    waitBox(false, "");
                    this.db_data = result.data.data;
                    this.da_data = result.data.data;
                    this.id = this.db_data.id;
                    return result.data;
                }
            );
        } catch (err) {
            waitBox(false, "");
            console.error(err);
        }
    }
    async delete() {
        try {
            waitBox(true, "");
            return await new axios.delete(this.route + "/" + this.id, {
                withCredentials: true,
            }).then((result) => {
                waitBox(false, "");
                this.db_data = null;
                this.da_data = null;
                this.id = null;
                return result.data;
            });
        } catch (err) {
            waitBox(false, "");
            console.error(err);
        }
    }
}
/* #endregion */
/* //////////////////////////////////////////////////////////// */

/* //////////////////////////////////////////////////////////// */
/* #region  ArcPage */
class arcPage {
    as_sender = "";
    name = null;
    id = null;
    ico = null;
    items = [];
    constructor($name, $ico) {
        this.name = $name;
        this.ico = $ico;
        this.id = "arc_" + $name + "_page";
        this.as_sender = `\$_${this.name}_page`;
    }
    createPageContainer() {
        let s = `
        <div id="${this.id}" class="arc_page cp-pnl flex-col black noscroll">
        `;
        $(arcMainPage).append(s);
    }
    setHeaderInfo($title, $ico) {
        $("#header-text").text($arc_captions.getCaption($title));
        $("#header-ico").empty();
        $("#header-ico").append(
            `<i class="fa ${$ico} mid-itm" aria-hidden="true"></i>`
        );
    }
    execute() {
        $(arcMainPage).empty();
        this.createPageContainer();
        this.setHeaderInfo(this.name, this.ico);
        for (var i in this.items) {
            let item = this.items[i];
            $("#" + this.id).append(item.contents(i));
        }
    }
    async initStoreInputForm($sender) {
        $("#if-buttons").empty();
        $("#if-inputs").empty();
        let sender_title = $arc_captions.getCaption(
            $sender.controller.table.name
        );
        let title = $arc_captions.getCaption("add") + " " + sender_title;
        $("#input-form-title").text(title);
        let controller = $sender.controller;
        // controller = customer, category, ..
        let fields = controller.table.fields;
        for (let i in fields) {
            let field = fields[i];
            if (field.hidden == true || field.readOnly == true) continue;
            let field_id = null;
            let field_caption = null;
            let default_value = null;
            switch (field.type) {
                case $field_type.string:
                    field_id = "edt_" + field.name;
                    field_caption = $arc_captions.getCaption(field.name);
                    default_value =
                        field.default != undefined ? field.default : "";
                    if (field.nullable != true) {
                        AddReqTextInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            default_value,
                            getDirection(default_value)
                        );
                    } else {
                        AddTextInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            default_value,
                            getDirection(default_value)
                        );
                    }
                    break;
                case $field_type.longText:
                    field_id = "edt_" + field.name;
                    field_caption = $arc_captions.getCaption(field.name);
                    default_value =
                        field.default != undefined ? field.default : "";
                    if (field.nullable != true) {
                        AddReqBoxInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            default_value,
                            getDirection(default_value)
                        );
                    } else {
                        AddBoxInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            default_value,
                            getDirection(default_value)
                        );
                    }
                    break;
                case $field_type.double:
                field_id = "edt_" + field.name;
                field_caption = $arc_captions.getCaption(field.name);
                default_value = '0';
                if (field.nullable != true) {
                    AddReqMoneyInput(
                        "#if-inputs",
                        field_id,
                        field_caption,
                        "$",
                        default_value,
                        true,
                        1
                    );
                } else {
                    AddMoneyInput(
                        "#if-inputs",
                        field_id,
                        field_caption,
                        "$",
                        default_value,
                        true,
                        1
                    );
                }
                break;
                case $field_type.bigInteger:
                    if (field.auto_increment != true) {
                        if (field.fk != true) {
                            // student.age
                        } else if (field.pk != true) {
                            // province.nationality
                            field_id = "edt_" + field.name;
                            takeplace("#if-inputs", field_id);
                            field_caption = $arc_captions.getCaption(
                                field.name
                            );
                            default_value =
                                field.default != undefined ? field.default : "";
                            let ref_controller = window["$_" + field.ref_table];
                            if (field.autoload != false) {
                                await ref_controller.index().then((result) => {
                                    let extra_values = "";
                                    if (field.extra_values != undefined) {
                                        extra_values = $sender.getFieldIdValue(
                                            field.extra_values,
                                            data
                                        );
                                    }
                                    if (field.nullable != true) {
                                        AddReqJsonComboBox(
                                            "#if-inputs",
                                            field_id,
                                            field_caption,
                                            ref_controller.db_index,
                                            field.index_key,
                                            default_value,
                                            true,
                                            field.onchange,
                                            extra_values
                                        );
                                    } else {
                                        AddJsonComboBox(
                                            "#if-inputs",
                                            field_id,
                                            field_caption,
                                            ref_controller.db_index,
                                            field.index_key,
                                            default_value,
                                            true,
                                            field.onchange,
                                            extra_values
                                        );
                                    }
                                    initRequiredFields();
                                });
                            } else {
                                if (field.nullable != true) {
                                    AddReqJsonComboBox(
                                        "#if-inputs",
                                        field_id,
                                        field_caption,
                                        {},
                                        field.index_key,
                                        default_value
                                    );
                                } else {
                                    AddJsonComboBox(
                                        "#if-inputs",
                                        field_id,
                                        field_caption,
                                        {},
                                        field.index_key,
                                        default_value
                                    );
                                }
                                initRequiredFields();
                            }
                        }
                    } else {
                        // auto_increment field
                    }
                    break;
                case $field_type.float:
                    field_id = "edt_" + field.name;
                    field_caption = $arc_captions.getCaption(field.name);
                    default_value =
                        field.default != undefined ? field.default : "";
                    if (field.nullable != true) {
                        AddReqMoneyInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            "$",
                            default_value,
                            true,
                            1
                        );
                    } else {
                        AddMoneyInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            "$",
                            default_value,
                            true,
                            1
                        );
                    }
                    break;
                case $field_type.integer:
                    if (field.auto_increment != true) {
                        if (field.fk != true) {
                            field_id = "edt_" + field.name;
                            field_caption = $arc_captions.getCaption(
                                field.name
                            );
                            default_value =
                                field.default != undefined ? field.default : "";
                            if (field.nullable != true) {
                                AddReqNumberInput(
                                    "#if-inputs",
                                    field_id,
                                    field_caption,
                                    "",
                                    default_value,
                                    true,
                                    1
                                );
                            } else {
                                AddNumberInput(
                                    "#if-inputs",
                                    field_id,
                                    field_caption,
                                    "",
                                    default_value,
                                    true,
                                    1
                                );
                            }
                        } else if (field.pk != true) {
                            // province.nationality
                            field_id = "edt_" + field.name;
                            takeplace("#if-inputs", field_id);
                            field_caption = $arc_captions.getCaption(
                                field.name
                            );
                            default_value =
                                field.default != undefined ? field.default : "";
                            let ref_controller = window["$_" + field.ref_table];
                            if (field.autoload != false) {
                                ref_controller.index().then((result) => {
                                    if (field.nullable != true) {
                                        AddReqJsonComboBox(
                                            "#if-inputs",
                                            field_id,
                                            field_caption,
                                            ref_controller.db_index,
                                            field.index_key,
                                            default_value,
                                            true,
                                            field.onchange
                                        );
                                    } else {
                                        AddJsonComboBox(
                                            "#if-inputs",
                                            field_id,
                                            field_caption,
                                            ref_controller.db_index,
                                            field.index_key,
                                            default_value,
                                            true,
                                            field.onchange
                                        );
                                    }
                                    initRequiredFields();
                                });
                            } else {
                                if (field.nullable != true) {
                                    AddReqJsonComboBox(
                                        "#if-inputs",
                                        field_id,
                                        field_caption,
                                        {},
                                        field.index_key,
                                        default_value,
                                        true,
                                        field.onchange
                                    );
                                } else {
                                    AddJsonComboBox(
                                        "#if-inputs",
                                        field_id,
                                        field_caption,
                                        {},
                                        field.index_key,
                                        default_value,
                                        true,
                                        field.onchange
                                    );
                                }
                                initRequiredFields();
                            }
                        }
                    } else {
                        // auto_increment field
                    }
                    break;
                case $field_type.image:
                    field_id = "edt_" + field.name;
                    field.caption = $arc_captions.getCaption(field.name);
                    default_value = field.default;
                    let value = server_public_URL + "src/img/" + default_value;
                    if (field.imageType == $imageType.profilePicture) {
                        AddProfileImg("#if-inputs", field_id, value);
                    } else if (field.imageType == $imageType.card) {
                        AddCardImg("#if-inputs", field_id, value, $arc_captions.getCaption(field.name));
                    }
                    break;
                case $field_type.enum:
                    field_id = "edt_" + field.name;
                    field_caption = $arc_captions.getCaption(field.name);
                    default_value =
                        field.default != undefined ? field.default : "";
                    if (field.nullable != true) {
                        AddReqComboBox(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            field.items,
                            default_value
                        );
                    } else {
                        AddComboBox(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            field.items,
                            default_value
                        );
                    }
                    break;
            }
        }
        let sender = $sender.as_sender;
        AddButton(
            "#if-buttons",
            "arc_store",
            $arc_captions.getCaption("add"),
            sender + ".compleateStore()"
        );
        $("#input-form").removeClass("hidden");
        if ($("#input-form input")[0] != undefined) {
            $("#input-form input")[0].focus();
            $("#input-form input")[0].select();
        }
        initRequiredFields();
    }
    storeRequest($sender) {
        this.initStoreInputForm($sender);
    }
    async updateRequest($sender, $show_close_button = true) {
        $("#if-buttons").empty();
        $("#if-inputs").empty();
        let sender_title = $arc_captions.getCaption(
            $sender.controller.table.name
        );
        let title = $arc_captions.getCaption("update") + " " + sender_title;
        $("#input-form-title").text(title);
        if ($show_close_button == false) {
            $("#close-input-form").hide();
        } else {
            $("#close-input-form").show();
        }
        let controller = $sender.controller;
        // controller = customer, category, ..
        let fields = controller.table.fields;
        let data = $sender.controller.da_data;
        for (let i in fields) {
            let field = fields[i];
            //let field = fields[i];
            if (field.hidden == true || field.readOnly == true) continue;
            let field_id = null;
            let field_caption = null;
            let default_value = $sender.getFieldValue(field.name, data);
            switch (field.type) {
                case $field_type.string:
                    field_id = "edt_" + field.name;
                    field_caption = $arc_captions.getCaption(field.name);
                    field_caption =
                        field_caption == undefined ? field.name : field_caption;
                    //default_value = (field.default != undefined)? field.default : "";
                    if (field.nullable != true) {
                        AddReqTextInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            default_value,
                            getDirection(default_value)
                        );
                    } else {
                        AddTextInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            default_value,
                            getDirection(default_value)
                        );
                    }
                    break;
                case $field_type.longText:
                    field_id = "edt_" + field.name;
                    field_caption = $arc_captions.getCaption(field.name);
                    //default_value = (field.default != undefined)? field.default : "";
                    if (field.nullable != true) {
                        AddReqBoxInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            default_value,
                            getDirection(default_value)
                        );
                    } else {
                        AddBoxInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            default_value,
                            getDirection(default_value)
                        );
                    }
                    break;
                case $field_type.bigInteger:
                    if (field.auto_increment != true) {
                        if (field.fk != true) {
                            field_id = "edt_" + field.name;
                            field_caption = $arc_captions.getCaption(
                                field.name
                            );
                            default_value = $sender.getFieldIdValue(
                                field.name,
                                data
                            );
                            if (field.nullable != true) {
                                AddReqNumberInput(
                                    "#if-inputs",
                                    field_id,
                                    field_caption,
                                    "",
                                    default_value,
                                    true,
                                    1
                                );
                            } else {
                                AddNumberInput(
                                    "#if-inputs",
                                    field_id,
                                    field_caption,
                                    "يوم / أيام",
                                    default_value,
                                    true,
                                    1
                                );
                            }
                        } else if (field.pk != true) {
                            // province.nationality
                            field_id = "edt_" + field.name;
                            field_caption = $arc_captions.getCaption(
                                field.name
                            );
                            default_value = $sender.getFieldIdValue(
                                field.name,
                                data
                            );
                            takeplace("#if-inputs", field_id);
                            let ref_controller = window["$_" + field.ref_table];
                            await ref_controller.index().then((result) => {
                                if (field.nullable != true) {
                                    AddReqJsonComboBox(
                                        "#if-inputs",
                                        field_id,
                                        field_caption,
                                        ref_controller.db_index,
                                        field.index_key,
                                        default_value
                                    );
                                } else {
                                    AddJsonComboBox(
                                        "#if-inputs",
                                        field_id,
                                        field_caption,
                                        ref_controller.db_index,
                                        field.index_key,
                                        default_value
                                    );
                                }
                                initRequiredFields();
                            });
                        }
                    } else {
                        // auto_increment field
                    }
                    break;
                case $field_type.float:
                    field_id = "edt_" + field.name;
                    field_caption = $arc_captions.getCaption(field.name);
                    default_value = $sender.getFieldIdValue(field.name, data);
                    if (field.nullable != true) {
                        AddReqMoneyInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            "$",
                            default_value,
                            true,
                            1
                        );
                    } else {
                        AddMoneyInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            "$",
                            default_value,
                            true,
                            1
                        );
                    }
                    break;
                case $field_type.double:
                    field_id = "edt_" + field.name;
                    field_caption = $arc_captions.getCaption(field.name);
                    default_value = $sender.getFieldIdValue(field.name, data);
                    if (field.nullable != true) {
                        AddReqMoneyInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            "$",
                            default_value,
                            true,
                            1
                        );
                    } else {
                        AddMoneyInput(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            "$",
                            default_value,
                            true,
                            1
                        );
                    }
                    break;
                case $field_type.integer:
                    if (field.auto_increment != true) {
                        if (field.fk != true) {
                            field_id = "edt_" + field.name;
                            field_caption = $arc_captions.getCaption(
                                field.name
                            );
                            default_value = $sender.getFieldIdValue(
                                field.name,
                                data
                            );
                            if (field.nullable != true) {
                                AddReqNumberInput(
                                    "#if-inputs",
                                    field_id,
                                    field_caption,
                                    "",
                                    default_value,
                                    true,
                                    1
                                );
                            } else {
                                AddNumberInput(
                                    "#if-inputs",
                                    field_id,
                                    field_caption,
                                    "يوم / أيام",
                                    default_value,
                                    true,
                                    1
                                );
                            }
                        } else if (field.pk != true) {
                            // province.nationality
                            field_id = "edt_" + field.name;
                            field_caption = $arc_captions.getCaption(
                                field.name
                            );
                            default_value = $sender.getFieldIdValue(
                                field.name,
                                data
                            );
                            let ref_controller = window["$_" + field.ref_table];
                            takeplace("#if-inputs", field_id);
                            console.log(field);
                            if (field.autoload != false) {
                                await ref_controller.index().then((result) => {
                                    let extra_values = "";
                                    if (field.extra_values != undefined) {
                                        extra_values = $sender.getFieldIdValue(
                                            field.extra_values,
                                            data
                                        );
                                    }
                                    if (field.nullable != true) {
                                        AddReqJsonComboBox(
                                            "#if-inputs",
                                            field_id,
                                            field_caption,
                                            ref_controller.db_index,
                                            field.index_key,
                                            default_value,
                                            true,
                                            field.onchange,
                                            extra_values
                                        );
                                    } else {
                                        AddJsonComboBox(
                                            "#if-inputs",
                                            field_id,
                                            field_caption,
                                            ref_controller.db_index,
                                            field.index_key,
                                            default_value,
                                            true,
                                            field.onchange,
                                            extra_values
                                        );
                                    }
                                    initRequiredFields();
                                });
                            } else {
                                if (field.loadAfter != undefined) {
                                    if (field.nullable != true) {
                                        AddReqJsonComboBox(
                                            "#if-inputs",
                                            field_id,
                                            field_caption,
                                            {},
                                            field.index_key,
                                            default_value,
                                            true,
                                            field.onchange
                                        );
                                    } else {
                                        AddJsonComboBox(
                                            "#if-inputs",
                                            field_id,
                                            field_caption,
                                            {},
                                            field.index_key,
                                            default_value,
                                            true,
                                            field.onchange
                                        );
                                    }
                                    let linked_field = $(
                                        "#edt_" + field.loadAfter
                                    );
                                    $(linked_field).change();
                                    initRequiredFields();
                                }
                            }
                        }
                    } else {
                        // auto_increment field
                    }
                    break;
                case $field_type.image:
                    field_id = "edt_" + field.name;
                    field.caption = $arc_captions.getCaption(field.name);
                    let value = (default_value == "")? 'src/img/upload.png' : server_public_URL + "storage/img/" + default_value;
                    if (field.imageType == $imageType.profilePicture) {
                        AddProfileImg("#if-inputs", field_id, value);
                    } else if (field.imageType == $imageType.card) {
                        AddCardImg("#if-inputs", field_id, value, $arc_captions.getCaption(field.name));
                    }
                    break;
                case $field_type.enum:
                    field_id = "edt_" + field.name;
                    field_caption = $arc_captions.getCaption(field.name);
                    default_value = $sender.getFieldIdValue(field.name, data);
                    if (field.nullable != true) {
                        AddReqComboBox(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            field.items,
                            default_value
                        );
                    } else {
                        AddComboBox(
                            "#if-inputs",
                            field_id,
                            field_caption,
                            field.items,
                            default_value
                        );
                    }
                    break;
            }
        }
        let sender = $sender.as_sender;
        AddButton(
            "#if-buttons",
            "arc_store",
            $arc_captions.getCaption("update"),
            sender + ".compleateUpdate()"
        );
        $("#input-form").removeClass("hidden");
        if ($("#input-form input")[0] != undefined) {
            $("#input-form input")[0].focus();
            $("#input-form input")[0].select();
        }
        initRequiredFields();
    }
    compleateStore() {
        $("#input-form").addClass("hidden");
    }
}
/* #endregion */
/* //////////////////////////////////////////////////////////// */

/* //////////////////////////////////////////////////////////// */
/* #region  ArcPageTable */
class arcPageTable {
    as_sender = "";
    title = null;
    ico = null;
    page = null;
    columns = [];
    controller = null;
    controls = [];
    functionButtons = [];
    imageLists = [];
    addButton = true;
    constructor($page, $controller, $columns = [], $title, $ico) {
        this.controller = $controller;
        this.page = $page;
        this.title = $title;
        this.ico = $ico;
        this.columns = $columns;
        $page.items.push(this);
        this.as_sender = "$_" + this.controller.table.name + "_table";
    }
    getTableBodyName() {
        return this.controller.table.name + "table-body";
    }
    removeAddButton() {
        this.addButton = false;
    }
    generateHeader() {
        let controls_col =
            this.controls.length == 0
                ? ""
                : `
            <th class="center controls-header">${$arc_captions.getCaption(
                "controls"
            )}</th>`;
        let s = `
        <tr>`;
        for (let i in this.columns) {
            if (this.controller.table.fields[this.columns[i]].icon == true) {
                s += `
                <th class="center icons-header">${$arc_captions.getCaption(
                    this.columns[i]
                )}</th>`;
            } else {
                s += `
                <th class="center">${$arc_captions.getCaption(
                    this.columns[i]
                )}</th>`;
            }
        }
        for (let i in this.imageLists) {
            let image_list = this.imageLists[i];
            s += `
            <th class="center controls-header">${$arc_captions.getCaption(
                image_list.caption
            )}</th>`;
        }
        for (let i in this.functionButtons) {
            let btn = this.functionButtons[i];
            s += `
            <th class="center controls-header">${$arc_captions.getCaption(
                btn.caption
            )}</th>`;
        }
        s +=
            controls_col +
            `
        </tr>`;
        return s;
    }
    appendItem($item) {
        $("#" + this.getTableBodyName()).append($item);
    }
    addFunctionButton(
        $caption,
        $ico,
        $functionName,
        $background_color,
        $color
    ) {
        let btn = {
            caption: $caption,
            ico: $ico,
            functionName: $functionName,
            background_color: $background_color,
            color: $color,
        };
        this.functionButtons.push(btn);
    }
    addImageList($caption, $image_list, $linked_field) {
        this.imageLists.push({
            caption: $caption,
            image_list: $image_list,
            linked_field: $linked_field,
        });
    }
    getFieldIdValue($field_name, $data_item) {
        let field = this.controller.table.fields[$field_name];
        let s = $data_item;
        if (field.path != "/") {
            let path_arr = field.path.split("/").slice(1);
            for (let i in path_arr) s = s[path_arr[i]];
        }
        let result = "";
        if (field.fk == true) {
            let full_field_name = $field_name;
            let sub_field_name = $field_name.substr(0, $field_name.length - 3);
            if (s[$field_name] != null) {
                if (s[full_field_name][field.index_key] != undefined) {
                    result = s[full_field_name]["id"];
                } else if (s[sub_field_name][field.index_key] != undefined) {
                    result = s[sub_field_name]["id"];
                } else {
                    result = "";
                }
            } else {
                result = "";
            }
        } else {
            result = s[$field_name];
        }
        return result == null || result == undefined ? "" : result;
    }
    getFieldValue($field_name, $data_item) {
        let field = this.controller.table.fields[$field_name];
        let s = $data_item;
        if (field.path != "/") {
            let path_arr = field.path.split("/").slice(1);
            for (let i in path_arr) s = s[path_arr[i]];
        }
        let result = "";
        if (field.fk == true) {
            if (s[$field_name] != null) {
                if (s[$field_name][field.index_key] != undefined) {
                    result = s[$field_name][field.index_key];
                } else {
                    let sub_field_name = $field_name.substr(
                        0,
                        $field_name.length - 3
                    );
                    if (s[sub_field_name] != null) {
                        if (s[sub_field_name][field.index_key] != undefined) {
                            result = s[sub_field_name][field.index_key];
                        } else {
                            result = "";
                        }
                    } else {
                        result = "";
                    }
                }
            } else {
                result = "";
            }
        } else if (field.type == $field_type.enum) {
            result = $arc_captions.getCaption(s[$field_name]);
        } else {
            result = s[$field_name];
        }
        return result == null || result == undefined ? "" : result;
    }
    index() {
        $("#" + this.getTableBodyName()).empty();
        this.controller.index().then((result) => {
            let data = result.data;
            for (let di in data) {
                let data_item = data[di];
                let s = `
                <tr num="${data_item.id}" id="${this.controller.table.name}_row_${data_item.id}">`;
                for (let i in this.columns) {
                    // columns = [name_ar, name_en, nationality_ar]
                    let col_data_value = data_item[this.columns[i]];
                    let row_data_value = "";
                    let field = this.controller.table.fields[this.columns[i]];
                    let extention =
                        field.execute == undefined ? "" : field.extention;
                    if (field.type == $field_type.image) {
                        row_data_value = `
                        <td class="center ${getDirection(col_data_value)}">
                            <div class="table_image_field">
                                <img src="${server_public_URL}storage/img/${this.getFieldValue(
                            this.columns[i],
                            data_item
                        )}">
                            </div>
                        </td>`;
                    } else {
                        if (extention != "") {
                            row_data_value = `<td class="center rtl">${this.getFieldValue(
                                this.columns[i],
                                data_item
                            )} ${extention}</td>`;
                        } else if (
                            this.controller.table.fields[this.columns[i]]
                                .icon == true
                        ) {
                            row_data_value = `<td class="center ${getDirection(
                                col_data_value
                            )} icons-header"><i class="fa ${this.getFieldValue(
                                this.columns[i],
                                data_item
                            )}" aria-hidden="true"></i></td>`;
                        } else {
                            row_data_value = `<td class="center ${getDirection(
                                col_data_value
                            )}">${this.getFieldValue(
                                this.columns[i],
                                data_item
                            )}</td>`;
                        }
                    }
                    s += row_data_value;
                }
                for (let i in this.imageLists) {
                    let imageList = this.imageLists[i];
                    let td = `<td class="center controls-row">
                        <button class="bg-cadetblue white" onclick="${imageList.image_list.as_sender}.execute([{name: '${imageList.linked_field}', value: ${data_item.id}}])">
                            <i class="fa fa-image" aria-hidden="true"></i>
                        </button>
                    </td>`;
                    s += td;
                }
                for (let i in this.functionButtons) {
                    let btn = this.functionButtons[i];
                    let td = `<td class="center controls-row">
                        <button class="${btn.background_color} ${btn.color}" onclick="${btn.functionName}(${data_item.id})">
                            <i class="fa ${btn.ico}" aria-hidden="true"></i>
                        </button>
                    </td>`;
                    s += td;
                }
                let controls_row = "";
                if (this.controls.length != 0) {
                    controls_row += `
                    <td class="center controls-row">`;
                    if (this.controls.indexOf($controls.delete) != -1) {
                        controls_row += `
                        <button class="red" onclick="${this.as_sender}.delete(${data_item.id})"><i class="fa-solid fa-trash-can"></i></button>`;
                    }
                    if (this.controls.indexOf($controls.update) != -1) {
                        controls_row += `
                        <button class="blue" onclick="${this.as_sender}.update(${data_item.id})"><i class="fa fa-edit" aria-hidden="true"></i></button>`;
                    }
                    controls_row += `
                    </td>`;
                }
                s += controls_row;
                this.appendItem(s);
            }
        });
    }
    delete($id) {
        this.controller.id = $id;
        this.controller.delete().then((result) => {
            if (result.code == "200") {
                $("#" + this.controller.table.name + `_row_` + $id).remove();
            }
        });
    }
    update($id) {
        this.controller.show($id).then((result) => {
            if (result.code == "200") {
                this.page.updateRequest(this);
            }
        });
    }
    storeRequest() {
        this.page.storeRequest(this);
    }
    async compleateStore() {
        if ((await required_done("if-inputs")) == false) return;
        let p = new Promise(async (resolve, reject) => {
            let fields = this.controller.table.fields;
            let data = {};
            for (let i in fields) {
                let field = fields[i];
                if (field.value != undefined) {
                    data[field.name] = eval(field.value);
                } else {
                    let field_id = "edt_" + field.name;
                    if ($("#" + field_id).length != 0) {
                        data[field.name] = await getFieldVal(field_id);
                    }
                }
            }
            resolve(data);
        });
        p.then((data) => {
            console.log(data);

            this.controller.da_data = data;
            this.controller.store().then((result) => {
                if (result.data.code == "200") {
                    this.index();
                    this.page.compleateStore();
                } else {
                    alertBox(msgType.error, result.data.message_ar);
                }
            });
        });
    }
    async compleateUpdate() {
        if ((await required_done("if-inputs")) == false) return;
        let p = new Promise(async (resolve, reject) => {
            let fields = this.controller.table.fields;
            let data = {};
            for (let i in fields) {
                let field = fields[i];
                let field_id = "edt_" + field.name;
                if ($("#" + field_id).length != 0) {
                    data[field.name] = await getFieldVal(field_id);
                }
            }
            resolve(data);
        });
        p.then((data) => {
            this.controller.da_data = data;
            this.controller.update().then((result) => {
                if (this.afterUpdate != undefined) {
                    eval(this.afterUpdate);
                } else {
                    this.index();
                }
                this.page.compleateStore();
            });
        });
    }
    contents($num) {
        let und_item = $num && $num > 0 ? " und_itm" : "";
        let buttons = "";
        if (this.addButton == true) {
            buttons += `
            <div class="flex-1 fnt-larger" onClick="${
                this.as_sender
            }.storeRequest()">
                <div class="ctrl-btn hov-green" title="${$arc_captions.getCaption(
                    "add"
                )}">
                    <i class="fa-solid fa-file-plus"></i>
                </div>
            </div>
            `;
        }
        return `
        <!-- page -->
        <div class="flex-1 bg-white flex-col ${und_item}">
            <!-- header bar -->
            <div class="mar-around pad-around-o line-gray center-v radius-10">
                <div class="flex-row center-v">
                    <!-- title -->
                    <div>${$arc_captions.getCaption(this.title)}</div>
                    <!-- search box -->
                    <div class="flex-row flex-3 cp-header-search mar-lr-o">
                        <form class="flex-1" autocomplete="off">
                            <input id="${
                                this.controller.table.name
                            }_searchbox" class="flex-1" type="search" name="" id="" placeholder="${$arc_captions.getCaption(
            "search"
        )}.." autocomplete="off">
                        </form>    
                    </div>
                    <!-- controls -->
                    <div class="flex-row center">
                        ${buttons}
                        <!--div class="flex-1 fnt-larger">
                            <div id="users-page-ctrl-delete" class="ctrl-btn hov-red" title="${$arc_captions.getCaption(
                                "delete"
                            )}"><i class="fa-solid fa-trash-can"></i></i></div>
                        </div>
                        <div class="flex-1 fnt-larger">
                            <div id="users-page-ctrl-selectall" class="ctrl-btn hov-blue" title="تحديد الكل"><i class="fa fa-check-square-o" aria-hidden="true"></i></div>
                        </div-->
                    </div>
                </div>
            </div>
            <!-- content -->
            <div class="flex-col flex-1 noscroll">
                <div class="cp-pnl fill-white rig-itm flex-fill mar-around noscroll">
                    <div class="flex-row height-100">
                        <section class="flex-col">
                            <div class="tbl-header">
                                <table cellpadding="0" cellspacing="2" border="0">
                                    <thead>
                                    ${this.generateHeader()}
                                    </thead>
                                </table>
                            </div>
                            <div class="tbl-content-container flex-1 scrolled">
                                <div class="tbl-content">
                                    <table id="${
                                        this.controller.table.name
                                    }-table-items" cellpadding="0" cellspacing="0" border="0">
                                        <tbody id="${this.getTableBodyName()}">
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </section>
                    </div>
                </div>
            </div>
        </div>
        <script>
            \$("#${this.controller.table.name}_searchbox").keyup(function () {
                var value = this.value.toLowerCase().trim();
            
                \$("table tr").each(function (index) {
                    if (!index) return;
                    \$(this).find("td").each(function () {
                        var id = \$(this).text().toLowerCase().trim();
                        var not_found = (id.indexOf(value) == -1);
                        \$(this).closest('tr').toggle(!not_found);
                        return not_found;
                    });
                });
            });
        </script>
        `;
    }
}
/* #endregion */
/* //////////////////////////////////////////////////////////// */

/* //////////////////////////////////////////////////////////// */
/* #region  ArcPageCards */
class arcPageCards {
    as_sender = "";
    title = null;
    ico = null;
    page = null;
    columns = [];
    cardColumns = [];
    controller = null;
    controls = [];
    addButton = true;
    index_for_user = false;
    constructor($page, $controller, $columns = [], $title, $ico) {
        this.controller = $controller;
        this.page = $page;
        this.title = $title;
        this.ico = $ico;
        this.columns = $columns;
        $page.items.push(this);
        this.as_sender = "$_" + this.controller.table.name + "_cards";
    }
    getTableBodyName() {
        return this.controller.table.name + "cards-body";
    }
    removeAddButton() {
        this.addButton = false;
    }
    generateHeader() {
        let controls_col =
            this.controls.length == 0
                ? ""
                : `
            <th class="center controls-header">تحكم</th>`;

        let details_colum =
            this.cardColumns.length == 0
                ? ""
                : `
            <th class="center controls-header">معلومات الخدمة</th>`;

        let s = `
        <tr>`;
        for (let i in this.columns) {
            s += `
            <th class="center">${$arc_captions.getCaption(
                this.columns[i]
            )}</th>`;
        }
        s +=
            details_colum +
            controls_col +
            `
        </tr>`;
        return s;
    }
    appendItem($item) {
        $("#" + this.getTableBodyName()).append($item);
    }
    getFieldIdValue($field_name, $data_item) {
        let field = this.controller.table.fields[$field_name];
        let s = $data_item;
        if (field.path != "/") {
            let path_arr = field.path.split("/").slice(1);
            for (let i in path_arr) s = s[path_arr[i]];
        }
        let result = "";
        if (field.fk == true) {
            let full_field_name = $field_name;
            let sub_field_name = $field_name.substr(0, $field_name.length - 3);
            if (s[$field_name] != null) {
                if (s[full_field_name][field.index_key] != undefined) {
                    result = s[full_field_name]["id"];
                } else if (s[sub_field_name][field.index_key] != undefined) {
                    result = s[sub_field_name]["id"];
                } else {
                    result = "";
                }
            } else {
                result = "";
            }
        } else {
            result = s[$field_name];
        }
        return result == null || result == undefined ? "" : result;
    }
    getFieldValue($field_name, $data_item) {
        let field = this.controller.table.fields[$field_name];
        let s = $data_item;
        if (field.path != "/") {
            let path_arr = field.path.split("/").slice(1);
            for (let i in path_arr) s = s[path_arr[i]];
        }
        let result = "";
        if (field.fk == true) {
            if (s[$field_name] != null) {
                if (s[$field_name][field.index_key] != undefined) {
                    result = s[$field_name][field.index_key];
                } else {
                    result = "";
                }
            } else {
                result = "";
            }
        } else {
            result = s[$field_name];
        }
        return result == null || result == undefined ? "" : result;
    }
    index() {
        $("#" + this.getTableBodyName()).empty();
        this.controller.index(this.index_for_user).then((result) => {
            let data = result.data;
            for (let di in data) {
                let data_item = data[di];
                let card = `
                <div id="${this.controller.table.name}_card_item_${
                    data_item["id"]
                }" class="card_item flex-1">
                    <div class="card">
                        <div class="card-img">
                            <img src="${server_public_URL}storage/img/${this.getFieldValue(
                    "image",
                    data_item
                )}" height="150px">
                        </div>
                        <div class="flex-row card-title">
                            <div class="card_name flex-1 card-header">${this.getFieldValue(
                                "name",
                                data_item
                            )}</div>
                            <div class="seen" title="عدد مرات مشاهدة العملاء لهذه الخدمة">
                                <div class="mid-itm pad-lr-h">${
                                    data_item["visits"]
                                }</div>
                                <i class="fa fa-eye" aria-hidden="true"></i>
                            </div>
                        </div>
                        <div class="flex-row card-title center">
                            <div class="card_name flex-1 card-header pad-l-h star" title="تقييم العملاء لهذه الخدمة">
                                <i class="fa fa-star mid-itm" aria-hidden="true"></i>
                                <div class="mid-itm pad-r-h">${
                                    data_item["evaluations"]
                                }</div>
                            </div>
                            <div class="card_name flex-1 card-header pad-l-h basket" title="عدد مرات شراء العملاء لهذه الخدمة">
                                <i class="fa fa-shopping-cart mid-itm" aria-hidden="true"></i>
                                <div class="mid-itm pad-r-h">${
                                    data_item["purchases"]
                                }</div>
                            </div>
                            <div class="card_name flex-1 card-header pad-l-h price" title="سعر هذه الخدمة">
                                <i class="fa fa-money mid-itm" aria-hidden="true"></i>
                                <div class="mid-itm pad-r-h">${
                                    data_item["price"]
                                } \$</div>
                            </div>
                        </div>
                        <div class="flex-row">
                            <button class="red" onclick="${
                                this.as_sender
                            }.delete(${
                    data_item.id
                })"><i class="fa-solid fa-trash-can"></i></i></button>
                            <button class="blue mar-right-auto" onclick="${
                                this.as_sender
                            }.update(${
                    data_item.id
                })"><i class="fa fa-edit" aria-hidden="true"></i></button>
                        </div>
                    </div>
                </div>`;
                this.appendItem(card);
            }
        });
    }
    delete($id) {
        this.controller.id = $id;
        this.controller.delete().then((result) => {
            if (result.code == "200") {
                $(
                    "#" + this.controller.table.name + `_card_item_` + $id
                ).remove();
            } else {
                alertBox(
                    msgType.error,
                    $arc_captions.getCaption("can_not_delete")
                );
            }
        });
    }
    update($id) {
        this.controller.show($id).then((result) => {
            if (result.code == "200") {
                this.page.updateRequest(this);
            }
        });
    }
    storeRequest() {
        this.page.storeRequest(this);
    }
    async compleateStore() {
        if ((await required_done("if-inputs")) == false) return;
        let p = new Promise(async (resolve, reject) => {
            let fields = this.controller.table.fields;
            let data = {};
            for (let i in fields) {
                let field = fields[i];
                if (field.value != undefined) {
                    data[field.name] = eval(field.value);
                } else {
                    let field_id = "edt_" + field.name;
                    if ($("#" + field_id).length != 0) {
                        data[field.name] = await getFieldVal(field_id);
                    }
                }
            }
            resolve(data);
        });
        p.then((data) => {
            console.log(data);

            this.controller.da_data = data;
            this.controller.store().then((result) => {
                if (result.data.code == "200") {
                    this.index();
                    this.page.compleateStore();
                } else {
                    alertBox(msgType.error, result.data.message_ar);
                }
            });
        });
    }
    async compleateUpdate() {
        if ((await required_done("if-inputs")) == false) return;
        let p = new Promise(async (resolve, reject) => {
            let fields = this.controller.table.fields;
            let data = {};
            for (let i in fields) {
                let field = fields[i];
                let field_id = "edt_" + field.name;
                if ($("#" + field_id).length != 0) {
                    data[field.name] = await getFieldVal(field_id);
                }
            }
            resolve(data);
        });
        p.then((data) => {
            this.controller.da_data = data;
            this.controller.update().then((result) => {
                if (this.afterUpdate != undefined) {
                    eval(this.afterUpdate);
                } else {
                    this.index();
                }
                this.page.compleateStore();
            });
        });
    }
    contents($num) {
        let buttons = "";
        if (this.addButton == true) {
            buttons += `
            <div class="flex-1 fnt-larger" onClick="${
                this.as_sender
            }.storeRequest()">
                <div class="ctrl-btn hov-green" title="${$arc_captions.getCaption(
                    "add"
                )}">
                    <i class="fa-solid fa-file-plus"></i>
                </div>
            </div>
            `;
        }
        return `
        <div class="flex-1 bg-white flex-col height-100">
            <!-- header bar -->
            <div class="mar-around pad-around-o line-gray center-v radius-10">
                <div class="flex-row center-v">
                    <!-- title -->
                    <div>${this.title}</div>
                    <!-- search box -->
                    <div class="flex-row flex-3 cp-header-search mar-lr-o">
                        <form class="flex-1" autocomplete="off">
                            <input id="${
                                this.controller.table.name
                            }_searchbox" class="flex-1" type="search" name="" id="" placeholder="${$arc}.." autocomplete="off">
                        </form>
                    </div>
                    <!-- controls -->
                    <div class="flex-row center">
                        ${buttons}
                        <!--div class="flex-1 fnt-larger">
                            <div id="users-page-ctrl-delete" class="ctrl-btn hov-red" title="${$arc_captions.getCaption(
                                "delete"
                            )}"><i class="fa-solid fa-trash-can"></i></i></div>
                        </div>
                        <div class="flex-1 fnt-larger">
                            <div id="users-page-ctrl-selectall" class="ctrl-btn hov-blue" title="تحديد الكل"><i class="fa fa-check-square-o" aria-hidden="true"></i></div>
                        </div-->
                    </div>
                </div>
            </div>
            <!-- content -->
            <div class="flex-col flex-1 pad-around-h mar-around scrolled">
                <div class="flex-1">
                    <div id="${this.getTableBodyName()}" class="">
                    
                    </div>
                </div>
            </div>
        </div>
        <script>
            \$("#${this.controller.table.name}_searchbox").keyup(function () {
                var value = this.value.toLowerCase().trim();
                \$("div.card_item").each(function (index) {
                    \$(this).find("div.card_name").each(function () {
                        var id = \$(this).text().toLowerCase().trim();
                        var not_found = (id.indexOf(value) == -1);
                        \$(this).closest('div.card_item').toggle(!not_found);
                        return not_found;
                    });
                });
            });
        </script>
        `;
    }
}
/* #endregion */
/* //////////////////////////////////////////////////////////// */

/* //////////////////////////////////////////////////////////// */
/* #region  ArcImageBox */
class arcImageBox {
    id = null;
    as_sender = null;
    images = {}; // [{img="", type="added", "loaded", "deleted"}, ...]
    static_fields = []; // static_fields = [{name: 'portfolio_id', vavlue: 1}, ...];
    controller = null;
    img_field = null;
    max = 0;
    constructor($controller, $static_fields) {
        this.controller = $controller;
        this.as_sender = "$_" + this.controller.table.name + "_list";
        for (let i in this.controller.table.fields) {
            let field = this.controller.table.fields[i];
            if (field.type == $field_type.image) {
                this.img_field = field;
            }
        }
        if (this.img_field == null) {
            console.error(
                `Can not find Image field on controller [${this.controller.table.name}]`
            );
        }
    }
    setMaximumItems($num) {
        this.max = $num;
    }
    getImgLstBodyName() {
        return this.controller.table.name + "ImgLst-body";
    }
    appendItem($item) {
        $("#" + this.getImgLstBodyName()).append($item);
    }
    appendRequest($sender) {
        let count = 0;
        if (this.max != 0) {
            $.each(this.images, function (i, img) {
                if (img.type != "deleted") {
                    count++;
                }
            });
            if (count < this.max) {
                $($sender).find("input")[0].click();
            } else {
                alert("The maximum number of images is " + this.max);
            }
        } else {
            $($sender).find("input")[0].click();
        }
    }
    storeRequest() {
        let data = {};
        if (this.static_fields != undefined) {
            if (this.static_fields.length > 0) {
                for (let i in this.static_fields) {
                    let static_field = this.static_fields[i];
                    data[static_field["name"]] = static_field["value"];
                }
            }
        }
        data[this.img_field.name] = this.images;
        this.controller.da_data = data;
        this.controller.store().then((result) => {
            if (result.data.code == 200) {
                this.close();
            }
        });
    }
    async add_images($sender) {
        let files = $($sender)[0].files;
        if (this.max != 0 && files.length > this.max) {
            alert("You can select only " + this.max + " file/s.");
            return;
        }
        for (let i = 0; i < files.length; i++) {
            let file = files[i];
            let url = $($sender).val();
            let ext = url.substring(url.lastIndexOf(".") + 1).toLowerCase();
            if (
                $sender.files &&
                $sender.files[0] &&
                (ext == "gif" || ext == "png" || ext == "jpeg" || ext == "jpg" || ext == "webp" || ext == "svg")
            ){
                let img_id = Math.floor(Math.random() * 10000000000);
                while (this.images[img_id] != undefined) {
                    img_id = Math.floor(Math.random() * 10000000000);
                }
                let file_based_64 = await fileToBase64(file);
                this.images[img_id] = { img: file_based_64, type: "added" };
                let image_item = `
                <div class="img-box-container pos_relative">
                    <div class="img-container">
                        <img src="${file_based_64}" alt="">
                    </div>
                    <div class="img-box-buttons">
                        <div class="img-box-btn" onclick="${this.as_sender}.deleteRequest(this, ${img_id})">
                            <i class="fa-solid fa-trash-can"></i></i>
                        </div>
                    </div>
                </div>`;
                $(`#${this.getImgLstBodyName()}`).append(image_item);
            } else {
                $("#img").attr("src", "/assets/no_preview.png");
            }
        }
    }
    updatePhotosList($sender, $sub_num) {
        current_scroll_position = document.documentElement.scrollTop;
        window.scrollTo(0, 0);
        document.body.style.overflow = "hidden";

        let row = $(`tr[row_num=` + $sub_num + `]`)[0];
        let old_images_field = $(row).find("input.edt_old_images")[0];
        let new_images_field = $(row).find("input.edt_new_images")[0];
        let old_images = JSON.parse($(old_images_field).val());
        let new_images = JSON.parse($(new_images_field).val());

        $is_new_row = $(row).hasClass("new_row");

        $("#add_image_file").attr("onclick", "add_new_image(" + $sub_num + ")");
        $("#pupup_images").empty();
        for (let i in old_images) {
            if (old_images[i] == null) continue;
            let photo = $site_url + old_images[i]["image"];
            let image_item =
                `
            <div class="image-item-container old_image">
                <div class="img-container">
                    <img src="` +
                photo +
                `">
                </div>
                <div class="btn-container">
                    <button onclick="delete_image(this, ` +
                $sub_num +
                `, ` +
                i +
                `)">
                        <i class="la la-trash inline-block vm" aria-hidden="true"></i>
                    </button>
                </div>
            </div>`;
            $("#pupup_images").append(image_item);
        }
        async_images($sub_num);
        $("#pupup_window").removeClass("hidden");
    }
    async_images($sub_num) {
        let row = $('tr[row_num="' + $sub_num + '"]')[0];
        let old_images_field = $(row).find("input.edt_old_images")[0];
        let new_images_field = $(row).find("input.edt_new_images")[0];
        let old_images = JSON.parse($(old_images_field).val());
        let new_images = JSON.parse($(new_images_field).val());

        $is_new_row = $(row).hasClass("new_row");
        let images = new_images;
        for (let i = 0; i < images.length; i++) {
            let file = images[i];
            if (file == null) continue;
            let image_item =
                `
                <div class="image-item-container new_image">
                    <div class="img-container">
                        <img src="` +
                file +
                `">
                    </div>
                    <div class="btn-container">
                        <button onclick="delete_new_image(this, ` +
                $sub_num +
                `, ` +
                i +
                `)">
                            <i class="la la-trash inline-block vm" aria-hidden="true"></i>
                        </button>
                    </div>
                </div>`;
            $("#pupup_images").append(image_item);
        }
    }
    deleteRequest($sender, $id) {
        $($sender).closest(".img-box-container").remove();
        if (this.images[$id]) {
            if (this.images[$id].type == "loaded") {
                this.images[$id].type = "deleted";
            } else {
                delete this.images[$id];
            }
        }
    }
    index() {
        this.images = {};
        $("#" + this.getImgLstBodyName()).empty();
        this.controller
            .index(this.index_for_user, this.static_fields)
            .then((result) => {
                let data = result.data;
                for (let di in data) {
                    let data_item = data[di];
                    let img_id = data_item.id;
                    let img = data_item[this.img_field.name];
                    this.images[img_id] = { img: data_item, type: "loaded" };
                    let card = `
                <div class="img-box-container pos_relative">
                    <div class="img-container">
                        <img src="storage/img/${img}" alt="">
                    </div>
                    <div class="img-box-buttons">
                        <div class="img-box-btn" onclick="${this.as_sender}.deleteRequest(this, ${img_id})">
                            <i class="fa-solid fa-trash-can"></i></i>
                        </div>
                    </div>
                </div>`;
                    this.appendItem(card);
                }
            });
    }
    contents($num) {
        let s = `
        <div class="cp-pnl cutted-90 noscroll inline-block fill-white">
            <div class="cp-pnl-content full-wh flex-col">
                <div class="cp-con-foot fill-steelblue flex-row pad-around-h mar-bottom">
                    <div class="cp-con-title flex-fill">
                        <div id="popup-form-title" class="cp-con-title-text ${$align}">
                            ${$arc_captions.getCaption("images")}
                        </div>
                    </div>
                    <div class="cp-con-btns pad-lr-o">
                        <div class="mid-hid"></div>
                        <div class="cp-con-btn-close mid-itm">
                            <button onclick="${this.as_sender}.close()">
                                <i class="fa-regular fa-circle-xmark"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="flex-fill pad-around-h scrolled">
                    <div id="${this.getImgLstBodyName()}" class="pad-around-h scrolled center">
                        
                    </div>
                </div>
                <div class="cp-con-foot fill-white lef-itm pad-around-o mar-top">
                    <div class="cp-con-btns ${$anti_align}">
                        <button class="green-btn" onclick="${
                            this.as_sender
                        }.appendRequest(this)">
                            <input type="file" multiple hidden onchange="${
                                this.as_sender
                            }.add_images(this)">
                            <i class="fa fa-plus inline-block pad-lr-h" area-hidden="true"></i>
                            <div class="inline-block">${$arc_captions.getCaption(
                                "add"
                            )}</div>
                        </button>
                        <button class="blue-btn" onclick="${
                            this.as_sender
                        }.storeRequest()">
                            <i class="fa fa-save inline-block pad-lr-h" area-hidden="true"></i>
                            <div class="inline-block">${$arc_captions.getCaption(
                                "save"
                            )}</div>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        `;
        return s;
    }
    execute($static_fields) {
        this.static_fields = $static_fields;
        $("#" + arcMainPopup).empty();
        $("#" + arcMainPopup).append(this.contents());
        this.index();
        $("#" + arcMainPopup).removeClass("hidden");
    }
    close() {
        this.images = {};
        $("#" + arcMainPopup).empty();
        $("#" + arcMainPopup).addClass("hidden");
    }
}
/* #endregion */
/* //////////////////////////////////////////////////////////// */

/* //////////////////////////////////////////////////////////// */
/* #region  ArcField */
class arcField {
    as_sender = "";
    title = null;
    page = null;
    field = null;
    controller = null;
    record_id = null;

    constructor($page, $controller, $record_id, $field_name) {
        this.controller = $controller;
        this.page = $page;
        this.title = $field_name;
        this.record_id = $record_id;
        this.field = $controller.table.fields[$field_name];
        $page.items.push(this);
        this.as_sender =
            "$_" +
            this.controller.table.name +
            "_" +
            this.field.name +
            "_field";
    }
    getName() {
        return "fld_" + this.controller.table.name + "_" + this.field.name;
    }
    getValue() {
        switch (this.field.type) {
            case $field_type.string:
                return $("#" + this.getName()).val();
                break;
            case $field_type.longText:
                return $("#" + this.getName()).val();
                break;
            case $field_type.smallInteger:
                return $("#" + this.getName()).val();
                break;
            case $field_type.integer:
                return $("#" + this.getName()).val();
                break;
            case $field_type.bigInteger:
                return $("#" + this.getName()).val();
                break;
            case $field_type.double:
                return $("#" + this.getName()).val();
                break;
            case $field_type.float:
                return $("#" + this.getName()).val();
                break;
            case $field_type.enum:
                return $("#" + this.getName()).val();
                break;
            case $field_type.date:
                return $("#" + this.getName()).val();
                break;
            case $field_type.dateTime:
                return $("#" + this.getName()).val();
                break;
        }
    }
    setValue($value) {
        switch (this.field.type) {
            case $field_type.string:
                return $("#" + this.getName()).val($value);
                break;
            case $field_type.longText:
                return $("#" + this.getName()).val($value);
                break;
            case $field_type.smallInteger:
                return $("#" + this.getName()).val($value);
                break;
            case $field_type.integer:
                return $("#" + this.getName()).val($value);
                break;
            case $field_type.bigInteger:
                return $("#" + this.getName()).val($value);
                break;
            case $field_type.double:
                return $("#" + this.getName()).val($value);
                break;
            case $field_type.float:
                return $("#" + this.getName()).val($value);
                break;
            case $field_type.enum:
                return $("#" + this.getName()).val($value);
                break;
            case $field_type.date:
                return $("#" + this.getName()).val($value);
                break;
            case $field_type.dateTime:
                return $("#" + this.getName()).val($value);
                break;
        }
    }
    async load() {
        this.controller.show(this.record_id).then((result) => {
            this.setValue(this.controller.db_data[this.field.name]);
            initRequiredFields();
        });
    }
    async update() {
        if ((await required_done("if-inputs")) == false) return;
        let field_name = this.field.name;
        let field_value = this.getValue();
        this.controller.id = this.record_id;
        this.controller.da_data = {
            [field_name]: field_value,
        };
        this.controller.update().then((result) => {
            this.load();
            console.log(result);
        });
    }
    contents($num) {
        let und_item = $num && $num > 0 ? " und_itm" : "";
        let field_name = this.getName();
        let update_method = this.as_sender + ".update();";
        switch (this.field.type) {
            case $field_type.smallInteger:
                return (
                    `
                <div class="cp-field flex-row ${und_item} pad-around-h">
                    <div class="cp-field-cap mid-itm nxt-itm">
                        <div class="mid-hid"></div>
                        <div class="cp-fc-text mid-itm">` +
                    $arc_captions.getCaption(this.title) +
                    `</div>
                    </div>
                    <div class="cp-field-input mid-itm nxt-itm">
                        <form>
                            <input id="${field_name}" value="0" type="number">
                        </form>
                    </div>
                    <div class="cp-field-status center mid-itm nxt-itm">
                    </div>
                    <div class="flex-row mar-lr-o">
                        <div class="mar-l-auto mar-r-auto">
                            <button class="green-btn" onclick="${update_method}">Update</button>
                        </div>
                    </div>
                </div>
                `
                );
                break;
            case $field_type.integer:
                return (
                    `
                <div class="cp-field flex-row und-itm pad-around-h">
                    <div class="cp-field-cap mid-itm nxt-itm">
                        <div class="mid-hid"></div>
                        <div class="cp-fc-text mid-itm">` +
                    $arc_captions.getCaption(this.title) +
                    `</div>
                    </div>
                    <div class="cp-field-input mid-itm nxt-itm">
                        <form>
                            <input id="${field_name}" value="0" type="number">
                        </form>
                    </div>
                    <div class="cp-field-status center mid-itm nxt-itm">
                    </div>
                    <div class="flex-row mar-lr-o">
                        <div class="mar-l-auto mar-r-auto">
                            <button class="green-btn" onclick="${update_method}">Update</button>
                        </div>
                    </div>
                </div>
                `
                );
                break;
            case $field_type.bigInteger:
                return (
                    `
                <div class="cp-field flex-row und-itm pad-around-h">
                    <div class="cp-field-cap mid-itm nxt-itm">
                        <div class="mid-hid"></div>
                        <div class="cp-fc-text mid-itm">` +
                    $arc_captions.getCaption(this.title) +
                    `</div>
                    </div>
                    <div class="cp-field-input mid-itm nxt-itm">
                        <form>
                            <input id="${field_name}" value="0" type="number">
                        </form>
                    </div>
                    <div class="cp-field-status center mid-itm nxt-itm">
                    </div>
                    <div class="flex-row mar-lr-o">
                        <div class="mar-l-auto mar-r-auto">
                            <button class="green-btn" onclick="${update_method}">Update</button>
                        </div>
                    </div>
                </div>
                `
                );
                break;
            case $field_type.double:
                return (
                    `
                <div class="cp-field flex-row und-itm pad-around-h">
                    <div class="cp-field-cap mid-itm nxt-itm">
                        <div class="mid-hid"></div>
                        <div class="cp-fc-text mid-itm">` +
                    $arc_captions.getCaption(this.title) +
                    `</div>
                    </div>
                    <div class="cp-field-input mid-itm nxt-itm">
                        <form>
                            <input id="${field_name}" value="0" type="number">
                        </form>
                    </div>
                    <div class="cp-field-status center mid-itm nxt-itm">
                    </div>
                    <div class="flex-row mar-lr-o">
                        <div class="mar-l-auto mar-r-auto">
                            <button class="green-btn" onclick="${update_method}">Update</button>
                        </div>
                    </div>
                </div>
                `
                );
                break;
            case $field_type.float:
                return (
                    `
                <div class="cp-field flex-row und-itm pad-around-h">
                    <div class="cp-field-cap mid-itm nxt-itm">
                        <div class="mid-hid"></div>
                        <div class="cp-fc-text mid-itm">` +
                    $arc_captions.getCaption(this.title) +
                    `</div>
                    </div>
                    <div class="cp-field-input mid-itm nxt-itm">
                        <form>
                            <input id="${field_name}" value="0" type="number">
                        </form>
                    </div>
                    <div class="cp-field-status center mid-itm nxt-itm">
                    </div>
                    <div class="flex-row mar-lr-o">
                        <div class="mar-l-auto mar-r-auto">
                            <button class="green-btn" onclick="${update_method}">Update</button>
                        </div>
                    </div>
                </div>
                `
                );
                break;
            case $field_type.string:
                return (
                    `
                <div class="arcfield_container flex-col">
                    <div class="cp-field flex-row und-itm pad-around-h">
                        <div class="cp-field-cap mid-itm nxt-itm">
                            <div class="mid-hid"></div>
                            <div class="cp-fc-text mid-itm">` +
                    $arc_captions.getCaption(this.title) +
                    `</div>
                        </div>
                        <div class="cp-field-input mid-itm nxt-itm">
                            <form>
                                <input id="${field_name}" value="0" type="text">
                            </form>
                        </div>
                        <div class="cp-field-status center mid-itm nxt-itm">
                        </div>
                    </div>
                    <div class="flex-row mar-lr-o">
                        <div class="mar-l-auto mar-r-auto">
                            <button class="green-btn" onclick="${update_method}">Update</button>
                        </div>
                    </div>
                </div>
                `
                );
                break;
            case $field_type.longText:
                return (
                    `
                <div class="arcfield_container flex-col">
                    <div class="cp-field flex-row und-itm pad-around-h">
                        <div class="cp-field-cap mid-itm nxt-itm">
                            <div class="mid-hid"></div>
                            <div class="cp-fc-text mid-itm">` +
                    $arc_captions.getCaption(this.title) +
                    `</div>
                        </div>
                        <div class="cp-field-input mid-itm nxt-itm">
                            <form>
                                <textarea id="${field_name}" value="0" type="text"></textarea>
                            </form>
                        </div>
                        <div class="cp-field-status center mid-itm nxt-itm">
                        </div>
                    </div>
                    <div class="flex-row mar-lr-o">
                        <div class="mar-l-auto mar-r-auto">
                            <button class="green-btn" onclick="${update_method}">Update</button>
                        </div>
                    </div>
                </div>
                `
                );
                break;
        }
    }
}
/* #endregion */
/* //////////////////////////////////////////////////////////// */

/* //////////////////////////////////////////////////////////// */
/* #region  Field Group */
class arcFieldsGroup {
    as_sender = "";
    title = null;
    page = null;
    fields = {};
    controller = null;
    record_id = null;

    constructor($page, $controller, $record_id, $name, $fields_names = []) {
        this.controller = $controller;
        this.page = $page;
        this.title = $name;
        this.record_id = $record_id;
        for (let i in $fields_names) {
            let field_name = $fields_names[i];
            let field = $controller.table.fields[field_name];
            this.fields[field_name] = field;
        }
        $page.items.push(this);
        this.as_sender = "$_" + this.controller.table.name + "_fields_group";
    }
    getFieldName($field_name) {
        return "fld_" + this.controller.table.name + "_" + this.title + "_fields_group_" + $field_name;
    }
    getFieldValue($field_name) {
        switch (this.fields[$field_name].type) {
            case $field_type.string:
                return $("#" + this.getFieldName($field_name)).val();
            break;
            case $field_type.longText:
                return $("#" + this.getFieldName($field_name)).val();
            break;
            case $field_type.smallInteger:
                return $("#" + this.getFieldName($field_name)).val();
            break;
            case $field_type.integer:
                return $("#" + this.getFieldName($field_name)).val();
            break;
            case $field_type.bigInteger:
                return $("#" + this.getFieldName($field_name)).val();
            break;
            case $field_type.double:
                return $("#" + this.getFieldName($field_name)).val();
            break;
            case $field_type.float:
                return $("#" + this.getFieldName($field_name)).val();
            break;
            case $field_type.enum:
                return $("#" + this.getFieldName($field_name)).val();
            break;
            case $field_type.date:
                return $("#" + this.getFieldName($field_name)).val();
            break;
            case $field_type.dateTime:
                return $("#" + this.getFieldName($field_name)).val();
            break;
            case $field_type.image:
                let hasUpdated = $("#" + this.getFieldName($field_name) + "_img").attr('has_updated');
                if(hasUpdated == 'true'){
                    return $("#" + this.getFieldName($field_name) + "_img").attr('src');
                }else{
                    return null;
                }
            break;
        }
    }
    setValue($field_name, $value) {
        switch (this.fields[$field_name].type) {
            case $field_type.string:
                return $("#" + this.getFieldName($field_name)).val($value);
            break;
            case $field_type.longText:
                return $("#" + this.getFieldName($field_name)).val($value);
            break;
            case $field_type.smallInteger:
                return $("#" + this.getFieldName($field_name)).val($value);
            break;
            case $field_type.integer:
                return $("#" + this.getFieldName($field_name)).val($value);
            break;
            case $field_type.bigInteger:
                return $("#" + this.getFieldName($field_name)).val($value);
            break;
            case $field_type.double:
                return $("#" + this.getFieldName($field_name)).val($value);
            break;
            case $field_type.float:
                return $("#" + this.getFieldName($field_name)).val($value);
            break;
            case $field_type.enum:
                return $("#" + this.getFieldName($field_name)).val($value);
            break;
            case $field_type.date:
                return $("#" + this.getFieldName($field_name)).val($value);
            break;
            case $field_type.dateTime:
                return $("#" + this.getFieldName($field_name)).val($value);
            break;
            case $field_type.image:
                return $("#" + this.getFieldName($field_name) + "_img").attr('src', 'storage/img/' + $value);
            break;
        }
    }
    async load() {
        this.controller.show(this.record_id).then((result) => {
            for (let i in this.fields) {
                let field = this.fields[i];
                this.setValue(field.name, this.controller.db_data[field.name]);
            }
            initRequiredFields();
        });
    }
    async update() {
        if ((await required_done("if-inputs")) == false) return;
        let data = {};
        for (let i in this.fields) {
            let field = this.fields[i];
            data[field.name] = this.getFieldValue(field.name);
        }
        this.controller.id = this.record_id;
        this.controller.da_data = data;
        this.controller.update().then((result) => {
            this.load();
            console.log(result);
        });
    }
    contents() {
        let fields_as_html = "";
        for (let i in this.fields) {
            let field = this.fields[i];
            let field_name = field.name;
            let field_title = $arc_captions.getCaption(field.name);
            let requiered =
                field.nullable == false ? " cp-field-requiered" : "";
            switch (field.type) {
                case $field_type.smallInteger:
                    fields_as_html +=
                        `
                    <div class="cp-field ${requiered} flex-row pad-around-h center-v">
                        <div class="cp-field-cap mid-itm nxt-itm">
                            <div class="mid-hid"></div>
                            <div class="cp-fc-text mid-itm">` +
                        field_title +
                        `</div>
                        </div>
                        <div class="cp-field-input mid-itm nxt-itm">
                            <form>
                                <input id="${this.getFieldName(
                                    field_name
                                )}" value="0" type="number">
                            </form>
                        </div>
                        <div class="cp-field-status center mid-itm nxt-itm">
                        </div>
                    </div>
                    `;
                break;
                case $field_type.integer:
                    fields_as_html +=
                        `
                    <div class="cp-field ${requiered} flex-row pad-around-h center-v">
                        <div class="cp-field-cap mid-itm nxt-itm">
                            <div class="mid-hid"></div>
                            <div class="cp-fc-text mid-itm">` +
                        field_title +
                        `</div>
                        </div>
                        <div class="cp-field-input mid-itm nxt-itm">
                            <form>
                                <input id="${this.getFieldName(
                                    field_name
                                )}" value="0" type="number">
                            </form>
                        </div>
                        <div class="cp-field-status center mid-itm nxt-itm">
                        </div>
                    </div>
                    `;
                break;
                case $field_type.bigInteger:
                    fields_as_html +=
                        `
                    <div class="cp-field ${requiered} flex-row pad-around-h center-v">
                        <div class="cp-field-cap mid-itm nxt-itm">
                            <div class="mid-hid"></div>
                            <div class="cp-fc-text mid-itm">` +
                        field_title +
                        `</div>
                        </div>
                        <div class="cp-field-input mid-itm nxt-itm">
                            <form>
                                <input id="${this.getFieldName(
                                    field_name
                                )}" value="0" type="number">
                            </form>
                        </div>
                        <div class="cp-field-status center mid-itm nxt-itm">
                        </div>
                    </div>
                    `;
                break;
                case $field_type.double:
                    fields_as_html +=
                        `
                    <div class="cp-field ${requiered} flex-row pad-around-h center-v">
                        <div class="cp-field-cap mid-itm nxt-itm">
                            <div class="mid-hid"></div>
                            <div class="cp-fc-text mid-itm">` +
                        field_title +
                        `</div>
                        </div>
                        <div class="cp-field-input mid-itm nxt-itm">
                            <form>
                                <input id="${this.getFieldName(
                                    field_name
                                )}" value="0" type="number">
                            </form>
                        </div>
                        <div class="cp-field-status center mid-itm nxt-itm">
                        </div>
                    </div>
                    `;
                break;
                case $field_type.float:
                    fields_as_html +=
                        `
                    <div class="cp-field ${requiered} flex-row pad-around-h center-v">
                        <div class="cp-field-cap mid-itm nxt-itm">
                            <div class="mid-hid"></div>
                            <div class="cp-fc-text mid-itm">` +
                        field_title +
                        `</div>
                        </div>
                        <div class="cp-field-input mid-itm nxt-itm">
                            <form>
                                <input id="${this.getFieldName(
                                    field_name
                                )}" value="0" type="number">
                            </form>
                        </div>
                        <div class="cp-field-status center mid-itm nxt-itm">
                        </div>
                    </div>
                    `;
                break;
                case $field_type.string:
                    fields_as_html +=
                        `
                    <div class="arcfield_container flex-col">
                        <div class="cp-field ${requiered} flex-row pad-around-h center-v">
                            <div class="cp-field-cap mid-itm nxt-itm">
                                <div class="mid-hid"></div>
                                <div class="cp-fc-text mid-itm">` +
                        field_title +
                        `</div>
                            </div>
                            <div class="cp-field-input mid-itm nxt-itm">
                                <form>
                                    <input id="${this.getFieldName(
                                        field_name
                                    )}" value="0" type="text">
                                </form>
                            </div>
                            <div class="cp-field-status center mid-itm nxt-itm">
                            </div>
                        </div>
                    </div>
                    `;
                break;
                case $field_type.longText:
                    fields_as_html +=
                        `
                    <div class="arcfield_container flex-col">
                        <div class="cp-field ${requiered} flex-row pad-around-h center-v">
                            <div class="cp-field-cap mid-itm nxt-itm">
                                <div class="mid-hid"></div>
                                <div class="cp-fc-text mid-itm">` +
                        field_title +
                        `</div>
                            </div>
                            <div class="cp-field-input mid-itm nxt-itm">
                                <form>
                                    <textarea id="${this.getFieldName(
                                        field_name
                                    )}" value="0" type="text"></textarea>
                                </form>
                            </div>
                            <div class="cp-field-status center mid-itm nxt-itm">
                            </div>
                        </div>
                    </div>
                    `;
                break;
                case $field_type.image:
                    fields_as_html +=
                        `
                    <input id="${this.getFieldName(field_name)}_file" type="file" hidden>
                    <div class="arcfield_container flex-col">
                        <div class="cp-field flex-col pad-around-h center-v">
                            <div class="cp-field-cap cp-img-field flex-row center-v">
                                <div class="cp-fc-text flex-1">` + field_title + `</div>
                                <div class="cp-fc-buttons">
                                    <button onclick="$('#${this.getFieldName(field_name)}_file').click();">
                                        <i class="fa-solid fa-cloud-arrow-up"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="cp-field-input width-50-perc inline-flex">
                                <img id="${this.getFieldName(field_name)}_img" has_updated='false' src="" width="100%">
                            </div>
                        </div>
                    </div>
                    <script>
                    $("#${this.getFieldName(field_name)}_file").change(async function(){
                        let file = $("#${this.getFieldName(field_name)}_file")[0].files[0];
                        let file_based_64 = await fileToBase64(file);
                        $("#${this.getFieldName(field_name)}_img").attr("src", file_based_64);
                        $("#${this.getFieldName(field_name)}_img").attr("has_updated", "true");
                        // will send the img.src as base64file
                    });
                    </script>
                    `;
                break;
            }
        }
        let s = `
        <div class="fields_group_container flex-col fill-white">
            <div class="fields_group_header">
                ${$arc_captions.getCaption(this.title)}               
            </div>
            <div class="fields_group_fields flex-col">
                <div class="arcfield_container flex-col">
                    ${fields_as_html}
                </div>
            </div>
            <div class="fields_group_buttons">
                <button class="green-btn" onclick="${
                    this.as_sender
                }.update();">Update</button>
            </div>
        </div>
        `;
        return s;
    }
}
/* #endregion */
/* //////////////////////////////////////////////////////////// */

/* //////////////////////////////////////////////////////////// */
/* #region  Sidebar */
function sideClick($sender, $exec) {
    if ($sender != undefined) {
        $(".cpn-item-selected").removeClass("cpn-item-selected");
        $($sender).addClass("cpn-item-selected");
    }
    eval($exec + "()");
}

function flod_sublist($sender, $id) {
    if ($($sender).attr("fload") == "0") {
        $($sender).attr("fload", 1);
        $($($sender).find(".cpn_arrow")[0]).addClass("floaded");
    } else {
        $($sender).attr("fload", 0);
        $($($sender).find(".cpn_arrow")[0]).removeClass("floaded");
    }
    $($id).slideToggle();
}

function create_sidebar_item($item) {
    let arrow =
        $item.sub_items.length != 0
            ? `
        <div class="cpn_arrow floaded">
            <i class="fa-solid fa-circle-chevron-right"></i>
        </div>
    `
            : "";
    let is_default = $item.default ? ` cpn-item-selected` : "";

    let onclick = "";
    if ($item.sub_items.length > 0) {
        onclick = `flod_sublist(this, ${$item.name}_sublist);`;
    } else if ($item.selectable) {
        onclick = `sideClick(this, '${$item.script}')`;
    } else {
        onclick = `sideClick(undefined, '${$item.script}')`;
    }

    let fload = $item.sub_items.length > 0 ? `fload="1"` : "";

    let s = `<div id="sidebar_${
        $item.name
    }" ${fload} class="cpn-item center-v cpn-mi ${is_default}" onclick="${onclick}">
        <div class="cpn-item-ico">
            <div class="cpn-item-ico-container">
                <i class="fa ${$item.icon}" aria-hidden="true"></i>
            </div>
        </div>
        <div class="cpn-item-info">
            <div class="cpn-item-name">${$arc_captions.getCaption(
                $item.name
            )}</div>
        </div>
        ${arrow}
    </div>`;
    $("#sidebar_items").append(s);
    if ($item.sub_items.length <= 0) {
        if ($item.default) $("#sidebar_" + $item.name).click();
    }
}

function create_sub_list($item) {
    let items = `<div id="${$item.name}_sublist" class="sub_list" style="display: none;">`;
    for (let i in $item.sub_items) {
        let sub_item = $item.sub_items[i];
        let is_default = sub_item.default ? ` cpn-item-selected` : "";
        let onclick = sub_item.selectable
            ? `sideClick(this, '${sub_item.script}')`
            : `sideClick(undefined, '${sub_item.script}')`;
        let s = `
        <div id="sidebar_${$item.name}_${
            sub_item.name
        }" class="cpn-item center-v cpn-mi ${is_default}" onclick="${onclick}">
            <div class="cpn-item-ico">
                <div class="cpn-item-ico-container mid-itm">
                    <i class="fa ${sub_item.icon}" aria-hidden="true"></i>
                </div>
            </div>
            <div class="cpn-item-info">
                <div class="cpn-item-name mid-itm">${$arc_captions.getCaption(
                    sub_item.name
                )}</div>
            </div>
        </div>`;
        items += s;
    }
    items += "</div>";
    $("#sidebar_items").append(items);
}

function init_sidebar(){
    $("#sidebar_items").empty();

    for (let i in $_sidebar.items) {
        let sidebar_item = $_sidebar.items[i];
        create_sidebar_item(sidebar_item);

        if (sidebar_item.sub_items.length != 0) {
            create_sub_list(sidebar_item);
        }
    }
    if ($_sidebar.settings != undefined) {
        if ($_sidebar.settings.default != undefined) {
            let sidebar_default = $_sidebar.settings.default;
            if (sidebar_default.indexOf(".") != -1) {
                let item_name = sidebar_default.substr(
                    0,
                    sidebar_default.indexOf(".")
                );
                $("#sidebar_" + item_name).click();
                let sub_item_name = sidebar_default.substr(
                    sidebar_default.indexOf(".") + 1,
                    sidebar_default.length
                );
                for (let i in $_sidebar.items) {
                    let sidebar_item = $_sidebar.items[i];
                    if (sidebar_item.name == item_name) {
                        let sub_items = sidebar_item.sub_items;
                        for (let j in sub_items) {
                            let sub_item = sub_items[j];
                            if (sub_item.name == sub_item_name) {
                                $(
                                    "#sidebar_" +
                                        item_name +
                                        "_" +
                                        sub_item_name
                                ).click();
                                break;
                            }
                        }
                    }
                }
            } else {
                let item_name = sidebar_default;
                $("#sidebar_" + item_name).click();
            }
        }
    }
}
/* #endregion */
/* //////////////////////////////////////////////////////////// */

/* //////////////////////////////////////////////////////////// */
/* #region  arcCaptions */
class arcCaptions{
    constructor(){
        
    }
    captions = {};
    add($name, $captions = {}){
        if($name != undefined){
            this.captions[$name] = $captions;
        }else{
            return "WARNING: Can not add caption [" + $name + "], this caption alrady is exists.";
        }
    }
    getCaption_ar($name){
        if(this.captions[$name] != undefined){
            return this.captions[$name]['ar'];
        }else{
            console.error('Caption [' + $name + '] not found');
        }
    }
    getCaption_en($name){
        if(this.captions[$name] != undefined){
            return this.captions[$name]['en'];
        }
        else{
            console.error('Caption [' + $name + '] not found');
        }
    }
    getCaption($name){
        if(this.captions[$name] != undefined){
            return this.captions[$name][$_lang];
        }
        else{
            console.error('Caption [' + $name + '] not found');
        }
    }
}

var $arc_captions = new arcCaptions();
/* #endregion */
/* //////////////////////////////////////////////////////////// */

/* //////////////////////////////////////////////////////////// */
/* #region  Initialization */
$().ready(function () {
    arcMainPage = $("#arcpanel #" + arcMainPageName);
    for (var i in $arcmodels) {
        let model = $arcmodels[i];
        $("#arcpanel").append(`<script src='${server_public_URL}arcpanel_lib/models/${model}'></script>`);
        $("#arcpanel").append(`<script src='${server_public_URL}arcpanel_lib/controllers/${model}'></script>`);
    }
    init_sidebar();
});
/* #endregion */
/* //////////////////////////////////////////////////////////// */